- key = HGVMetaIdentifierHelper::generateRandomId 'geoPlace'

.multi.geoSpot{:id => 'multi_' + key.to_s}
  %ul.items{:id => 'multiItems_' + key.to_s}
    - placeList.each_index do |placeIndex| # place / alternatives
      - placeBase = baseChildren + '[place][' + placeIndex.to_s + ']'
      - placeBaseAttributes = placeBase + '[attributes]'
      - placeBaseChildren = placeBase + '[children]'
      - place = placeList[placeIndex]
      %li
        = hidden_field_tag placeBaseAttributes + '[id]', place.id, :disabled => !@identifier.mutable?, :class => 'observechange provenancePlaceId'
        = hidden_field_tag placeBaseAttributes + '[exclude]', place.exclude, :disabled => !@identifier.mutable?, :class => 'observechange provenancePlaceExclude'
        %span.delete{:onclick => 'multiRemove(this.parentNode); geoUpdateExcludeLists(\'' + key + '\');', :title => I18n.t('meta.tooltip.multiDelete')} x
        %span.move{:title => I18n.t('meta.tooltip.multiMove')} o
          
        .geoContainer
          = render :partial => 'hgv_meta_identifiers/geoSpot', :locals => {:geoSpotList => place.geoList, :placeBaseChildren => placeBaseChildren, :provenanceIndex => provenanceIndex, :placeIndex => placeIndex}
          .clear

  = javascript_tag "Sortable.create('multiItems_" + key.to_s + "', {overlap: 'horizontal', constraint: false, handle: 'move'});"
  
  %span.swifty.addPlace=I18n.t('meta.label.addPlace')
